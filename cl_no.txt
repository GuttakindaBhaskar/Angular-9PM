Component
---------
    - Simple "TypeScript class" behaves like Component.

    - Perticular "portion" of webpage also called as Component.

    - As a Angular Developer, we can create more than one component.

    - As a angular Developer, we can provide communication between one component to another component.

    - we will deploy all components in src/app folder.

    - we will register components in "app.module.ts" file.

*************************************************
demoApp
     src  
       app
         first.component.ts
         first.component.html

         app.module.ts
      index.html
***********************************************

Multiple Components
-------------------

*************************************************************
multiple-components
                  src
                     app
                        header.component.ts
                        header.component.html
                        header.component.css

                        home.component.ts
                        home.component.html
                        home.component.css

                        footer.component.ts
                        footer.component.html
                        footer.component.css


                        main.component.ts
                        main.component.html
                        main.component.css


                        app.module.ts
                    index.html
**************************************************************************


*************************************************
custSerEx
        src
          app
            services
               my.service.ts
            components
               first.component.ts
               first.component.html

               second.component.ts
               second.component.html

               main.component.ts
               main.component.html

            app.module.ts
        index.html 
***************************************************


Step 1.
     create the modal based on server response


*****************************************************
countriesEx
         src
           app
              model
                 countries.model.ts
*****************************************************


Step 2.
   create the service

**********************************************************
countriesEx
          src
            app
              services
                 countries.servie.ts
**********************************************************

Step 3.
   create the component

*************************************************************
countriesEx
          src
            app
              components
                   countries.component.ts
                   countries.component.html
*************************************************************



Rest API Example
----------------

1) create the angular application

   > ng new customersEx

2) switch to angular application

   > cd customersEx

3) create the model based on server response

**************************************
customersEx
          src
            app
              model
                 customers.model.ts
***************************************


4) create the service

*****************************************
customersEx
         src
           app
             services
                customers.service.ts
****************************************

5) create the component

*******************************************
customersEx
         src
           app
             components
                customers.component.ts
                customers.component.html
*******************************************

                                          ****** Single Page Application ******

      - loading one component to another component, without refreshing the whole web page called as single page application.

      - loading one component to another component, in single page application called as Routing.

      - we will implement Routing, with the help of "Routes" class.

      - "Routes" class present in "RouterModule".

      - "RouterModule" present in "@angular/router" package.


Step 1.
   create the components

   => MainComponent              (master)

   => LaptopComponent            (child)

   => CameraComponent            (child)

   => ClothesComponent           (child)


   > ng g c components/main --selector=main -is --skipTests --flat true

   > ng g c components/laptop --selector=laptop -is --skipTests --flat true

   > ng g c components/camera --selector=camera -is --skipTests --flat true

   > ng g c components/clothes --selector=clothes -is --skipTests --flat true

Step 2.
   implement the business logic in target components.

Step 3.
   create the hyperlinks

   main.component.html

      => "/laptops"  -----------   LaptopComponent

      => "/cameras"  ----------    CameraComponent

      => "/clothes"  ----------    ClothesComponent


Step 4.
   implement the Routing

      app.module.ts

Child Routing
=============

step 1.
   create the components

step 2.
   implement the business logic in target components

step 3.
   create the hyperlinks

   dell ------  DellComponent

   canon  -----  CaninComponent

   niki   -----  NikiComponent

step 4.
   implement the routing   



                                       ***** Authentication Guards *****

1) CanActivate

         - used to perform Authentication while entering to main routes.

2) CanDeactivate

      - used to perform Authentication while leaving the main routes.

3) CanActivateChild

      - used to perform the Authentication while entering into child routes.


[Note : we will implement Authentication Guards with the help of Custom Services]


******************************************************
spaDemo1
       src
         app
           auth
             auth.guards.ts
*****************************************************             



















































































































































