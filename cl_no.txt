Component
---------
    - Simple "TypeScript class" behaves like Component.

    - Perticular "portion" of webpage also called as Component.

    - As a Angular Developer, we can create more than one component.

    - As a angular Developer, we can provide communication between one component to another component.

    - we will deploy all components in src/app folder.

    - we will register components in "app.module.ts" file.

*************************************************
demoApp
     src  
       app
         first.component.ts
         first.component.html

         app.module.ts
      index.html
***********************************************

Multiple Components
-------------------

*************************************************************
multiple-components
                  src
                     app
                        header.component.ts
                        header.component.html
                        header.component.css

                        home.component.ts
                        home.component.html
                        home.component.css

                        footer.component.ts
                        footer.component.html
                        footer.component.css


                        main.component.ts
                        main.component.html
                        main.component.css


                        app.module.ts
                    index.html
**************************************************************************


*************************************************
custSerEx
        src
          app
            services
               my.service.ts
            components
               first.component.ts
               first.component.html

               second.component.ts
               second.component.html

               main.component.ts
               main.component.html

            app.module.ts
        index.html 
***************************************************


Step 1.
     create the modal based on server response


*****************************************************
countriesEx
         src
           app
              model
                 countries.model.ts
*****************************************************


Step 2.
   create the service

**********************************************************
countriesEx
          src
            app
              services
                 countries.servie.ts
**********************************************************

Step 3.
   create the component

*************************************************************
countriesEx
          src
            app
              components
                   countries.component.ts
                   countries.component.html
*************************************************************



Rest API Example
----------------

1) create the angular application

   > ng new customersEx

2) switch to angular application

   > cd customersEx

3) create the model based on server response

**************************************
customersEx
          src
            app
              model
                 customers.model.ts
***************************************


4) create the service

*****************************************
customersEx
         src
           app
             services
                customers.service.ts
****************************************

5) create the component

*******************************************
customersEx
         src
           app
             components
                customers.component.ts
                customers.component.html
*******************************************

                                          ****** Single Page Application ******

      - loading one component to another component, without refreshing the whole web page called as single page application.

      - loading one component to another component, in single page application called as Routing.

      - we will implement Routing, with the help of "Routes" class.

      - "Routes" class present in "RouterModule".

      - "RouterModule" present in "@angular/router" package.


Step 1.
   create the components

   => MainComponent              (master)

   => LaptopComponent            (child)

   => CameraComponent            (child)

   => ClothesComponent           (child)


   > ng g c components/main --selector=main -is --skipTests --flat true

   > ng g c components/laptop --selector=laptop -is --skipTests --flat true

   > ng g c components/camera --selector=camera -is --skipTests --flat true

   > ng g c components/clothes --selector=clothes -is --skipTests --flat true

Step 2.
   implement the business logic in target components.

Step 3.
   create the hyperlinks

   main.component.html

      => "/laptops"  -----------   LaptopComponent

      => "/cameras"  ----------    CameraComponent

      => "/clothes"  ----------    ClothesComponent


Step 4.
   implement the Routing

      app.module.ts

Child Routing
=============

step 1.
   create the components

step 2.
   implement the business logic in target components

step 3.
   create the hyperlinks

   dell ------  DellComponent

   canon  -----  CaninComponent

   niki   -----  NikiComponent

step 4.
   implement the routing   



                                       ***** Authentication Guards *****

1) CanActivate

         - used to perform Authentication while entering to main routes.

2) CanDeactivate

      - used to perform Authentication while leaving the main routes.

3) CanActivateChild

      - used to perform the Authentication while entering into child routes.


[Note : we will implement Authentication Guards with the help of Custom Services]


******************************************************
spaDemo1
       src
         app
           auth
             auth.guards.ts
*****************************************************             



communication between components
================================

   - as a angular developer, we can create more than one component.

   - angular applications are component based applications.

   - as a angular developer, we can provide communication between components.

      1) @Input()

      2) @Output()

      3) @ViewChild()

      4) @ViewChildren()

   - we can provide communication between parent component to child component with the help of @Input() decorator.

   - we can provide communication between child component to parent component with the help of @Output() decorator. 

   - we can provide communication between siblings by using @ViewChild() and @ViewChildren() decorators.



steps to provide the communication between parent component to child component
==============================================================================
1) create the angular application

      > ng new commEx


2) switch to angular application

      > cd commEx


3) create the child component

      ************************************************
      commEx
           src
             app
                child.component.ts
                child.component.html
      ************************************************

4) create the parent component


   ****************************************************
   commEx
        src  
          app
            parent.component.ts
            parent.component.html
   ***************************************************


5) bootstrap parent component


steps to share the data from child component to parent component
================================================================
1) declare @Output() decorator in child component


                                                ***** Directives *****

      - Directives enhances the view capabilities.

      - we have two types of Directives.

               1) predefined directives

               2) custom directives

      - the directives given by angular framework called as predefined directives.

      - the directives developed by us called as custom directives.

      - directives categorized into 3 types.

            1) event based directives

            2) structural directives

            3) attribute type directives

      - we will handle events(click,dblclick,mouse enter,....) with the help of event based directives

      - we will manipulate browser memory with the help of structural directives.

      - commonly used to directives are attribute type directives.

      - event based directives surrounder with "()"

      - structural directives prefix with "*"

      - attribute type directives surrounder with "[]"

predefined directives
=====================
      1) [(ngModel)]

      2) (click)

      3) (dblclick)

      4) *ngFor        
      
      5) *ngIf

      6) [ngStyle]

      7) [ngClass]

      8) [ngSwitch]

      9) (ngSubmit)


                                             ****** Forms ******

         - Angular supports two types of forms.

               1) Template Driven Forms

               2) Model Driven Forms

         - Template Driven Forms mainly focused on application design.

         - Model Driven Forms mainly focused on Application Model


Model Driven Forms
==================

   - [formGroup] directive used to assign the logical name to the form.

   - formControlName directive used to give the logical name to the form fields.


*************************************
mdfEx
    src
      app.component.html
      app.component.ts

      app.module.ts
*************************************


                                                NgRx Package

1) store

      - store is the main part of State Management Application.

2) reducer

      - Application business logic called as reducer.

3) initialState

      - application default values called as initialState

4) state

      - reducer output called as State.

5) dispatch

      - Requesting to store called as dispatch

      - dispatch contain 

            1) Action

            2) payload


6) subscribe

      - receving the state from store called as subscribe.


Ex.
   consume below local rest api call.


   => http://localhost:8080/api/products



Step 1.
   create the angular project

      > ng new productsStateManagementEx

Step 2.

      switch to productsStateManagementEx

      > cd productsStateManagementEx

Step 3.

      download the node modules.

      => @ngrx/store

      => @ngrx/effects


      > yarn add @ngrx/store @ngrx/effects --save


create the modal
================

**********************************************************
productsStateManagementEx
                        src
                          app
                            modal
                              products.modal.ts
**********************************************************

         - finally "Product" modal is ready

      
create the actions
===================

*******************************************************************
productsStateManagementEx
                        src
                          app
                           actions
                              products.actions.ts
*******************************************************************

   enum ===> ProductActionTypes


   type  ===> ProductAction

               GetProducts 
               GetProductsSuccess 
               GetProductsFail


implement effects

********************************************************
miniproject-app
              src
                 app
                   effects
                      products.effects.ts
*******************************************************


implement the reducer


******************************************************
miniproject-app  
              src
                app
                  reducer
                     products.reducer.ts
*****************************************************













































































































































































































































































